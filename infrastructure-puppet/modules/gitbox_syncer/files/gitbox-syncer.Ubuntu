#!/bin/bash
### BEGIN INIT INFO
# Provides:          gitbox-syncer
# Required-Start:    $local_fs $network
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: gitbox-syncer
# Description:       start gitbox-syncer daemon (gunicorn)
#### END INIT INFO

. /lib/init/vars.sh
. /lib/lsb/init-functions

syncer_user=${syncer_user-"www-data"}
syncer_group=${syncer_group-"www-data"}
syncer_pidfile=${syncer_pidfile-"/var/run/gitbox-syncer/server.pid"}
syncer_config=${syncer_config-"/usr/local/etc/gitbox-syncer/gitbox-syncer.yaml"}
syncer_logfile=${syncer_logfile-"/var/log/gitbox-syncer.log"}
syncer_appdir=${syncer_appdir-"/usr/local/etc/gitbox-syncer"}
pidfile="${syncer_pidfile}"

RETVAL=0

start() {
    if [ -f $syncer_pidfile ]; then
        # pid file exists, check is proc is running
        PID=`cat $syncer_pidfile`
        if kill -0 $PID >/dev/null 2>&1; then
            echo 'Gitbox syncer is already running'
            return 1
        else
            # syncer was killed but not cleaned up
            echo 'Gitbox syncer was not stopped cleanly, cleaning up'
            rm -f $syncer_pidfile
        fi
    fi

    echo "Starting gitbox syncer (gunicorn): "
    cd $syncer_appdir
    gunicorn --pid $syncer_pidfile --bind 0.0.0.0:8081 -w 8 -D --user=$syncer_user --group=$syncer_group gitbox-syncer:application
    RETVAL=$?
    [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    return $RETVAL
}

stop() {
    echo "Stopping gitbox syncer daemon: "
    cd $syncer_appdir
    PID=`cat $syncer_pidfile`
    kill $PID >/dev/null 2>&1
    RETVAL=$?
    [ $RETVAL -eq 0 ] && echo "ok" || echo "failed"
    return $RETVAL
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        stop
        start
        ;;
    status)
        PID=`cat $syncer_pidfile`
        if ps -p $PID > /dev/null
        then
            echo "gitbox syncer is running, yay!"
            exit 0
        else
            echo "gitbox syncer ain't running :("
            exit 3
        fi;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
esac

exit $RETVAL
